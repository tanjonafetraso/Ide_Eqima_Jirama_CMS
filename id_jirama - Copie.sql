-- MySQL Script generated by MySQL Workbench
-- Mon Sep  6 16:35:44 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema db_jirama
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema db_jirama
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db_jirama` DEFAULT CHARACTER SET utf8 ;
USE `db_jirama` ;

-- -----------------------------------------------------
-- Table `db_jirama`.`utilisateurs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `utilisateurs` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nom_d_utilisateur` VARCHAR(45) NULL,
  `mot_de_passe` VARCHAR(300) NULL,
  `role` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_jirama`.`adresses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `adresses` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `adresse_mac` VARCHAR(17) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


ALTER TABLE `adresses`  
ADD `status` varchar(15) default 'actif' NOT NULL; 
-- -----------------------------------------------------
-- Table `db_jirama`.`collaborateurs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `collaborateurs` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `matricule` VARCHAR(45) NULL,
  `nom` VARCHAR(100) NULL,
  `date_de_naissance` VARCHAR(10) NULL,
  `type` VARCHAR(10) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_jirama`.`empreintes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `empreintes` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `doigt` VARCHAR(45) NULL,
  `image` MEDIUMBLOB NULL,
  `collaborateur_id` INT NOT NULL,
  PRIMARY KEY (`id`, `collaborateur_id`),
  INDEX `fk_empreintes_collaborateurs1_idx` (`collaborateur_id` ASC) ,
  CONSTRAINT `fk_empreintes_collaborateurs1`
    FOREIGN KEY (`collaborateur_id`)
    REFERENCES `collaborateurs` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_jirama`.`authentifications`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `authentifications` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `datetime` VARCHAR(50) NULL,
  `utilisateur_id` INT NOT NULL,
  `adresse_id` INT NOT NULL,
  PRIMARY KEY (`id`, `utilisateur_id`, `adresse_id`),
  INDEX `fk_authentifications_utilisateurs1_idx` (`utilisateur_id` ASC) ,
  INDEX `fk_authentifications_adresses1_idx` (`adresse_id` ASC) ,
  CONSTRAINT `fk_authentifications_utilisateurs1`
    FOREIGN KEY (`utilisateur_id`)
    REFERENCES `utilisateurs` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_authentifications_adresses1`
    FOREIGN KEY (`adresse_id`)
    REFERENCES `adresses` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

--------------

CREATE TABLE IF NOT EXISTS responsable_ajout (
  id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  id_empreintes int not NULL,
  id_authentifications int not NULL,
  score double not null,
  FOREIGN KEY (id_empreintes) REFERENCES empreintes(id),
   FOREIGN KEY (id_authentifications) REFERENCES authentifications(id));

create view pass as (select authentifications.id as id_auth,current_timestamp() as datetime,authentifications.utilisateur_id,authentifications.adresse_id,
responsable_ajout.id ,responsable_ajout.id_empreintes ,responsable_ajout.score
from authentifications,responsable_ajout  
where authentifications.id=responsable_ajout.id_authentifications 
);

create view historique as (select pass.* , empreintes.image,empreintes.doigt,empreintes.collaborateur_id 
 from pass,empreintes where pass.id_empreintes = empreintes .id );

create view historiqueSansImage as (select pass.* ,empreintes.doigt,empreintes.collaborateur_id 
 from pass,empreintes where pass.id_empreintes = empreintes .id );

create view suivi as(select historiqueSansImage.*,utilisateurs.nom_d_utilisateur,adresses.adresse_mac,collaborateurs.matricule
   from historiqueSansImage,utilisateurs,adresses,collaborateurs 
where historiqueSansImage.utilisateur_id=utilisateurs.id and historiqueSansImage.adresse_id=adresses.id
  and historiqueSansImage.collaborateur_id=collaborateurs.id);
----------------------------------------------------
----------------ajout table identification 
-----------------------------------------------
create or replace view passToIdentification as (select pass.id,pass.id_auth,pass.datetime,pass.utilisateur_id,
pass.adresse_id,pass.id_empreintes,pass.score,empreintes.doigt,empreintes.collaborateur_id 
 from pass,empreintes where pass.id_empreintes = empreintes.id );


create or replace view identification as(select passToIdentification.*,utilisateurs.nom_d_utilisateur,utilisateurs.code_Cms,adresses.adresse_mac,collaborateurs.matricule
   from passToIdentification,utilisateurs,adresses,collaborateurs 
where passToIdentification.utilisateur_id=utilisateurs.id and passToIdentification.adresse_id=adresses.id
  and passToIdentification.collaborateur_id=collaborateurs.id);