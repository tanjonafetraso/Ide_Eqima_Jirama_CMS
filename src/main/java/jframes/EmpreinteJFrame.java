/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jframes;

import factory.DAOFactory;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import models.Collaborateur;
import models.Empreinte;
import models.Authentification;
import dao.RajoutDAO;
import zkfinger.ZKScanner;
import javax.swing.JFrame;
import models.Rajout;
public class EmpreinteJFrame extends FrameModel {

    private static EmpreinteJFrame instance;
    
    private static Collaborateur collaborateur;
    
    private javax.swing.JButton retour = new javax.swing.JButton();

    public boolean stop = false;

    public static EmpreinteJFrame getInstance(Collaborateur personne){

        collaborateur = personne;
        
        if (instance == null) {
            instance = new EmpreinteJFrame();
        }else{
            instance.init();          
        }

        return instance;
    } 

    
    
    public EmpreinteJFrame() {
        
        retour.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        retour.setText("Fin");
        retour.addActionListener(new retourListener(this));
        initComponents();
        init();
        this.setResizableâ€‹(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbImage = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jlNom = new javax.swing.JLabel();
        jlDdn = new javax.swing.JLabel();
        jlType = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtEmpreintes = new javax.swing.JTable();
        jbEnregistrer = new javax.swing.JButton();
        jbSupprimer = new javax.swing.JButton();
        jbMenu = new javax.swing.JButton();
        jlMat = new javax.swing.JLabel();
        jcDoigts = new javax.swing.JComboBox<>();

        setTitle("Profils");
        setResizable(true);

        jbImage.setToolTipText("");
        jbImage.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jbImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImageActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ajout d'empreinte");

        jlNom.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlNom.setText("Nom");

        jlDdn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlDdn.setText("Date de Naissance");

        jlType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlType.setText("Type");

        jtEmpreintes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Empreinte"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtEmpreintes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtEmpreintesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtEmpreintes);
        if (jtEmpreintes.getColumnModel().getColumnCount() > 0) {
            jtEmpreintes.getColumnModel().getColumn(0).setResizable(false);
            jtEmpreintes.getColumnModel().getColumn(1).setResizable(false);
        }

        jbEnregistrer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbEnregistrer.setText("Enregistrer");
        jbEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEnregistrerActionPerformed(evt);
            }
        });

        jbSupprimer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbSupprimer.setText("Supprimer");

        jbMenu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbMenu.setText("Retour");
        jbMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMenuActionPerformed(evt);
            }
        });

        jlMat.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jlMat.setText("Matricule");

        jcDoigts.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jcDoigts.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcDoigtsItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jbImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jlMat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jlNom, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                .addComponent(jlDdn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jlType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jcDoigts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbEnregistrer, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                               // .addComponent(jbSupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(retour, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jlMat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlNom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlDdn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlType)
                        .addGap(25, 25, 25)
                        .addComponent(jcDoigts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbEnregistrer)
                          //  .addComponent(jbSupprimer)
                            .addComponent(retour))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbMenu))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void jbImageActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void jbMenuActionPerformed(java.awt.event.ActionEvent evt) {                                       
        CollaborateurJframe.getInstance().showFrame();
        EmpreinteJFrame.getInstance(collaborateur).hideFrame();
    }                                      

    private void jbEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {                                              
        
        if (jbImage.getIcon() == null) {
            JOptionPane.showMessageDialog(instance, "Veuillez scanner votre empreinte avant d'enregistrer !", "Message", JOptionPane.WARNING_MESSAGE);
        
        } else {
            
            //if (ZKScanner.getInstance().match().score > 0) {
            if (ZKScanner.getInstance().isOpenned() == false) {
               // ZKScanner.getInstance().open();
               ZKScanner.getInstance().demarrer(this);
            }
            if (ZKScanner.getInstance().match(collaborateur.getMatricule()).score > 0) {
               JOptionPane.showMessageDialog(instance, "L'empreinte existe dÃ©jÃ  dans la base", "Message", JOptionPane.WARNING_MESSAGE);
        
            } else {
                Empreinte empreinte = DAOFactory.getEmpreinteDAO().getByPersonneIdAndDoigt(collaborateur.getId(), (String) jcDoigts.getSelectedItem());
                if (empreinte != null) {
                    empreinte = DAOFactory.getEmpreinteDAO().update(
                        
                        new Empreinte(
                                empreinte.getId(),
                                (String)jcDoigts.getSelectedItem(),
                                //new FileInputStream(new File("fingerprint.bmp"),
                                collaborateur.getId()
                        )
                            
                    );
                   Rajout objR = new Rajout(empreinte.getId(),Authentification.getSession().getId(),0,"inscription");
                   new RajoutDAO().create(objR); 
                    JOptionPane.showMessageDialog(instance, "Empreinte "+empreinte.getDoigt()+" a Ã©tÃ© modifiÃ© avec succes");
                
                } else {
                    
                    empreinte = DAOFactory.getEmpreinteDAO().create(
                        
                        new Empreinte(
                                (String)jcDoigts.getSelectedItem(),
                                //new FileInputStream(new File("fingerprint.bmp"),
                                collaborateur.getId()
                        )
                
                    );
                    Rajout objR = new Rajout(empreinte.getId(),Authentification.getSession().getId(),0,"inscription");
                   new RajoutDAO().create(objR);
                    JOptionPane.showMessageDialog(instance, "Empreinte "+empreinte.getDoigt()+" a Ã©tÃ© ajoutÃ© avec succÃ¨s");
                
                }
                
                
                
                showData();
        
            }
            
        }
        
    }                                             

    private void jtEmpreintesMouseClicked(java.awt.event.MouseEvent evt) {                                          
        int index = jtEmpreintes.getSelectedRow();
        TableModel model = jtEmpreintes.getModel();
        
        int id = Integer.parseInt(model.getValueAt(index, 0).toString());
        
        Empreinte empreinte = DAOFactory.getEmpreinteDAO().get(id);
        
       jcDoigts.setSelectedItem(empreinte.getDoigt());
        
        InputStream is;
        try {
            is = empreinte.getImage().getBinaryStream(1, (int) empreinte.getImage().length());
            BufferedImage imag= ImageIO.read(is);
            Image image = imag;
            ImageIcon icon =new ImageIcon(image);
            jbImage.setIcon(icon);
        } catch (IOException | SQLException ex) {
            Logger.getLogger(EmpreinteJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        jbSupprimer.setEnabled(true);
    }                                         

    private void jcDoigtsItemStateChanged(java.awt.event.ItemEvent evt) {                                          
        
        Empreinte empreinte = DAOFactory.getEmpreinteDAO().getByPersonneIdAndDoigt(collaborateur.getId(), (String) jcDoigts.getSelectedItem());
        
        if (empreinte != null) {
            InputStream is;
            try {
                is = empreinte.getImage().getBinaryStream(1, (int) empreinte.getImage().length());
                BufferedImage imag= ImageIO.read(is);
                Image image = imag;
                ImageIcon icon =new ImageIcon(image);
                jbImage.setIcon(icon);
            } catch (IOException | SQLException ex) {
                Logger.getLogger(EmpreinteJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jbSupprimer.setEnabled(true);
        }else{
         jbImage.setIcon(null);
         jbSupprimer.setEnabled(false);
        }
        
    }                                         

    private void reset(){
    
        jbImage.setIcon(null);
        
    }
    
    private void init(){ 
        
        stop = false;
        
        jbSupprimer.setEnabled(false);
    
        jlMat.setText(String.valueOf(EmpreinteJFrame.collaborateur.getMatricule()));
        jlNom.setText(EmpreinteJFrame.collaborateur.getNom());
        jlDdn.setText(EmpreinteJFrame.collaborateur.getDate_de_naissance());
        jlType .setText(EmpreinteJFrame.collaborateur.getType());
        
        String [] doigts = {"Pouce D", "Pouce G", "Index D", "Index G", "Majeur D", "Majeur G", "Annulaire D", "Annulaire G", "Auriculaire D", "Auriculaire G"};
        jcDoigts.setModel(new DefaultComboBoxModel<>(doigts));
        jcDoigts.setSelectedIndex(0);
        Empreinte empreinte = DAOFactory.getEmpreinteDAO().getByPersonneIdAndDoigt(collaborateur.getId(), (String) jcDoigts.getSelectedItem());
        
        if (empreinte != null) {
            InputStream is;
            try {
                is = empreinte.getImage().getBinaryStream(1, (int) empreinte.getImage().length());
                BufferedImage imag= ImageIO.read(is);
                Image image = imag;
                ImageIcon icon =new ImageIcon(image);
                jbImage.setIcon(icon);
            } catch (IOException | SQLException ex) {
                Logger.getLogger(EmpreinteJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            jbSupprimer.setEnabled(true);
        }
        
        showData();
        
        thread = new MyThread();
        thread.start();
        
    }
    
    private void showData (){
    
       DefaultTableModel model = (DefaultTableModel) jtEmpreintes.getModel();
        
        model.setRowCount(0);
        
        Object [] row = new Object[2];
        
        DAOFactory.getEmpreinteDAO().getAllByPersonneId(collaborateur.getId()).stream().map(empreinte -> {
            row [0] = empreinte.getId();
            return empreinte;
        }).map(empreinte -> {
            row [1] = empreinte.getDoigt();
            return empreinte;            
        }).forEachOrdered(_item -> {
            model.addRow(row);
        });
    
    
    }
    
    public void showFrame(){
        this.setVisible(true);        
        this.setLocationRelativeTo(null);
    }
    
    public void hideFrame(){
        this.setVisible(false);
      
    }
    

    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbEnregistrer;
    private javax.swing.JButton jbImage;
    private javax.swing.JButton jbMenu;
    private javax.swing.JButton jbSupprimer;
    private javax.swing.JComboBox<String> jcDoigts;
    private javax.swing.JLabel jlDdn;
    private javax.swing.JLabel jlMat;
    private javax.swing.JLabel jlNom;
    private javax.swing.JLabel jlType;
    private javax.swing.JTable jtEmpreintes;
    // End of variables declaration                   
        
        
    }
    
