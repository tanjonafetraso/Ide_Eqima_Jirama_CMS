/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jframes;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import factory.DAOFactory;
import models.Collaborateur;
import models.Rajout;
import java.util.List;
import models.Authentification;
import dao.RajoutDAO;
import dao.IdentificationDAO1;
import zkfinger.ZKScanner;
import eu.hansolo.steelseries.gauges.Linear;
import eu.hansolo.steelseries.tools.ColorDef;
import eu.hansolo.steelseries.tools.FrameDesign;
import eu.hansolo.steelseries.tools.LcdColor;
import eu.hansolo.steelseries.tools.LedColor;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import models.Identification;
/*------------------------------------*/


/**
 *
 * @author EQIMA
 */
public class RechercheJFrame extends FrameModel {

    private static RechercheJFrame instance;
    private static Collaborateur personne;
    private IdentificationDAO1 TBlidentification;
    private FindThread thread;
    public String op="recherche";
    private ArrayList<Identification> identificationListe;
    
  
    private void init() {
        //To change body of generated methods, choose Tools | Templates.
        stop = false;
        thread = new FindThread();
        
        thread.start();
        bViewPage.setEnabled(false);
    }

    public static boolean stop = false;


    public static RechercheJFrame getInstance() {

        if (instance == null) {
            instance = new RechercheJFrame();
        } else {
            instance.init();
        }
        
        return instance;
    }

    

    public RechercheJFrame() {
        initComponents();
        // JOptionPane.showMessageDialog(instance, ZKScanner.getInstance().open(), "Message", JOptionPane.WARNING_MESSAGE);
        init();
        matricule.setText("");
        jbImage.setIcon(null);
        identificationListe = new ArrayList<>();
        TBlidentification = new IdentificationDAO1();
        this.setResizableâ€‹(true);
        this.setLocationRelativeTo(null);
       
        gauge.setValueAnimated(0);

        //System.out.println(ZKScanner.getInstance().open());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jbImage = new javax.swing.JButton();
        jbrecherche = new javax.swing.JButton();
        jbReconnect = new javax.swing.JButton();
        jbMenu = new javax.swing.JButton();
        bViewPage = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtResult = new javax.swing.JTextArea();
        matricule =new JTextField();
       javax.swing.JLabel mat = new javax.swing.JLabel("Matricule");

        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Identification d'un collaborateur");

        jbImage.setToolTipText("");
        jbImage.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jbImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImageActionPerformed(evt);
            }
        });

        jbMenu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbMenu.setText("Retour");
        jbMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gauge.setValueAnimated(0);
			reset();
                gauge.setTitle("Correspondance");
                jbMenuActionPerformed(evt);
            }
        });

        jbrecherche.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbrecherche.setText("Identifier");
        jbrecherche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbrechercheActionPerformed(evt);
            }
        });

        jbReconnect.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbReconnect.setText("Reconnecter");
        jbReconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReconnectActionPerformed(evt);
            }
        });

        bViewPage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bViewPage.setText("Voir la fiche du patient");
        bViewPage.setEnabled(false);
        bViewPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gauge.setValueAnimated(0);
                gauge.setTitle("Correspondance");
                File f=new File("fingerprint.bmp");
                f.delete();
                bViewPageActionPerformed(evt);
            }
        });

        jtResult.setEditable(false);
        jtResult.setColumns(20);
        jtResult.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jtResult.setRows(7);
        jScrollPane1.setViewportView(jtResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jbReconnect)
                    .addComponent(mat)
                    .addComponent(matricule)
                    .addComponent(jbImage,
                     javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    // .addComponent(jbrecherche)
                     .addComponent(jScrollPane1,
                         javax.swing.GroupLayout.PREFERRED_SIZE,400, javax.swing.GroupLayout.PREFERRED_SIZE)
                      ))
                    .addGroup(layout.createSequentialGroup()
                    .addComponent(bViewPage, javax.swing.GroupLayout.PREFERRED_SIZE, 250, 
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbMenu,
                     javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
               
                
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE,Short.MAX_VALUE)
                    .addGap(34, 34, 34)
                    .addComponent(jbReconnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE,Short.MAX_VALUE)
                    .addComponent(mat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE,Short.MAX_VALUE)
                    .addComponent(matricule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE,Short.MAX_VALUE)
                    .addComponent(jbImage, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(34, 34, 34)
                .addGroup(layout.createSequentialGroup()
                   // .addComponent(jbrecherche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE,Short.MAX_VALUE)
                   // .addGap(34, 34, 34)
                    .addComponent(jScrollPane1))
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(bViewPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                      .addGap(34, 34, 34)
               ))
               
              ))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbImageActionPerformed

    private void jbMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMenuActionPerformed
        RechercheJFrame.getInstance().hideFrame();
        MenuJFrame.getInstance().showFrame();
        matricule.setText("");
        jbImage.setIcon(null);
    }//GEN-LAST:event_jbMenuActionPerformed

    private void jbrechercheActionPerformed(java.awt.event.ActionEvent evt) {
        String matt = matricule.getText();
        if (matt.length() < 1) {
            if(op.equals("recherche")) {
            JOptionPane.showMessageDialog(instance, "Veuillez entrer le numero matricule");
            }
            else {
                 JOptionPane.showMessageDialog(instance, "Veuillez vous reconnecter");
            }
        } else {
            ZKScanner.ZKScannerMatch match = ZKScanner.getInstance().match(matt);

            gauge.setBackground(Color.lightGray);
            gauge.setFrameDesign(FrameDesign.BLACK_METAL);
            gauge.setLedColor(LedColor.YELLOW);
            gauge.setLcdColor(LcdColor.STANDARD_LCD);
            gauge.setTrackStart(0);
            gauge.setTrackStartColor(Color.MAGENTA);
            gauge.setTrackSection(80);
            gauge.setTrackSectionColor(Color.YELLOW);
            gauge.setTrackStop(100);
            gauge.setTrackStopColor(Color.GREEN);
            gauge.setTrackVisible(true);

            jtResult.setLayout(new BorderLayout());
            jtResult.add(gauge, BorderLayout.CENTER);

            if (match.score < 51) {
                gauge.setValueColor(ColorDef.RED);
            } else if (match.score > 50 && match.score < 80) {
                gauge.setValueColor(ColorDef.YELLOW);
            } else {
                gauge.setValueColor(ColorDef.GREEN);
            }
            gauge.setValueAnimated(0);
            gauge.setTitle("Correspondance");
            if (match.score > 0) {
                gauge.setValueAnimated(match.score);
                personne = DAOFactory.getCollaborateurDAO().get(match.empreinte.getCollaborateur_id());

                Rajout objR = new Rajout(match.empreinte.getId(), Authentification.getSession().getId(), match.score, "identification");
                new RajoutDAO().create(objR);
                
                gauge.setTitle(personne.getNom());
              
            } else {

                gauge.setTitle("Correspondance");
                gauge.setValueAnimated(0);
            }

            if (match.score > 39) {
                bViewPage.setEnabled(true);
            } else {
                bViewPage.setEnabled(false);
            }

        }
    }

    private void jbReconnectActionPerformed(java.awt.event.ActionEvent evt) {
         ZKScanner.getInstance().FreeSensor(thread);
        ZKScanner.getInstance().demarrer(this);
        System.out.println(ZKScanner.getInstance().mbStop);
        FindThread newthread= new FindThread();
        newthread.start();
       
    }
    private void bViewPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bViewPageActionPerformed

        try {
            String url = "http://192.168.222.17/api/employe/fiche?m=" + personne.getMatricule() + "&t=" + personne.getType();
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        } catch (java.io.IOException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_bViewPageActionPerformed

    public void showFrame() {
        this.setVisible(true);
        this.setLocationRelativeTo(null);
         ZKScanner.getInstance().FreeSensor(thread);
        ZKScanner.getInstance().demarrer1(this);
        System.out.println(ZKScanner.getInstance().mbStop);
        FindThread newthread= new FindThread();
        newthread.start();
        
    }

    public void hideFrame() {
        this.setVisible(false);
        stop = true;
        reset();
        
    }

    private void reset() {

        jtResult.setText("");
        //   bViewPage.setEnabled(false);
        
        jbImage.setIcon(null);
        //newthread.stop();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bViewPage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbrecherche;
    private javax.swing.JButton jbReconnect;
    private javax.swing.JButton jbMenu;
    private javax.swing.JTextArea jtResult;
    private JTextField matricule;
    public Linear gauge = new Linear();
    
    // End of variables declaration//GEN-END:variables

     public class FindThread extends Thread {

        @Override
        // End of variables declaration                 
        public void run() {

            super.run();
            while (!ZKScanner.getInstance().mbStop) {
                if (ZKScanner.getInstance().capture()) {

                    try {
                        jbImage.setIcon(new ImageIcon(ImageIO.read(new File("fingerprint.bmp"))));
                        String matt = matricule.getText();
                        System.out.println(matt.length()+"taille matricule");
                        if (matt.length() < 1) {
                            JOptionPane.showMessageDialog(instance, "Veuillez entrer le numero matricule");
                        } else 
                        {
                            ZKScanner.ZKScannerMatch match = ZKScanner.getInstance().match(matt);
                            System.out.println(match.score + "score");
                            gauge.setBackground(Color.lightGray);
                            gauge.setFrameDesign(FrameDesign.BLACK_METAL);
                            gauge.setLedColor(LedColor.YELLOW);
                            gauge.setLcdColor(LcdColor.STANDARD_LCD);
                            gauge.setTrackStart(0);
                            gauge.setTrackStartColor(Color.MAGENTA);
                            gauge.setTrackSection(80);
                            gauge.setTrackSectionColor(Color.YELLOW);
                            gauge.setTrackStop(100);
                            gauge.setTrackStopColor(Color.GREEN);
                            gauge.setTrackVisible(true);

                            jtResult.setLayout(new BorderLayout());
                            jtResult.add(gauge, BorderLayout.CENTER);

                            if (match.score < 51) {
                                gauge.setValueColor(ColorDef.RED);
                            } else if (match.score > 50 && match.score < 80) {
                                gauge.setValueColor(ColorDef.YELLOW);
                            } else {
                                gauge.setValueColor(ColorDef.GREEN);
                            }
                            gauge.setValueAnimated(0);
                            gauge.setTitle("Correspondance");
                          
                             if (match.score > 0) {
                             gauge.setValueAnimated(match.score);
                             personne = DAOFactory.getCollaborateurDAO().get(match.empreinte.getCollaborateur_id());

                             Rajout objR = new Rajout(match.empreinte.getId(), Authentification.getSession().getId(), match.score, "identification");
                             new RajoutDAO().create(objR);
                             
                             int indexmax=IdentificationDAO1.getInstance().getMAxTableIdentification();
                             List<Identification> farany=IdentificationDAO1.getInstance().getAllTableIdentification(indexmax);
                            
                             IdentificationDAO1.getInstance().create_identification(farany.get(0),String.valueOf(match.score));
                            gauge.setTitle(personne.getNom());
                            jtResult.setBounds(100,100,600,400);
                           
                            } 
                            else {
                                gauge.setTitle("Correspondance");
                                gauge.setValueAnimated(0);
                            }

                            if (match.score > 39) {
                                bViewPage.setEnabled(true);
                            } else {
                                bViewPage.setEnabled(false);
                            }
                    } 
}catch (Exception ex) {
                        System.out.println("Une exception "+ex.getMessage());
                    }

                }

            }

        }

    }
}
