package jframes;

import api.GetRequest;
import factory.DAOFactory;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import models.Collaborateur;
import zkfinger.ZKScanner;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import zkfinger.ZKScanner;
import javax.swing.ImageIcon;
import javax.imageio.ImageIO;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.io.InputStream;
import models.Empreinte;
import javax.swing.ImageIcon;
import models.Authentification;
import dao.RajoutDAO;
import models.Rajout;




public class CollaborateurViaAPIJFrame extends FrameModel {

    

    private static CollaborateurViaAPIJFrame instance;

    private static Collaborateur currentCollab = null;

    public boolean stop = false;
    public String op="inscription";

    
    

    public static CollaborateurViaAPIJFrame getInstance() {
        if (instance == null) {
            instance = new CollaborateurViaAPIJFrame();
        }
        
        return instance;
    }

    public CollaborateurViaAPIJFrame() {
        initComponents();
        jbImage.setIcon(null);
        jtMatricule.setText("");
        this.setResizable​(true);
        this.setLocationRelativeTo(null);
        //reset();
       
        
       // System.out.println(ZKScanner.getInstance().open());
        // showData();
    }

    
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtPersonnes = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4= new javax.swing.JLabel();
        jtMatricule = new javax.swing.JTextField();
        jbEnregistrer = new javax.swing.JButton();
        jbReset = new javax.swing.JButton();
        jbMenu = new javax.swing.JButton();
        jbEmpreinte = new javax.swing.JButton();
        jbCheck = new javax.swing.JButton();
        jbReconnect = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jcDoigts = new javax.swing.JComboBox<>();
        jbImage = new javax.swing.JButton();
        jbEnregistrer1 = new javax.swing.JButton();
 
        jbImage.setToolTipText("");
        jbImage.setSize(1500,1500);
        jbImage.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jbImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImageActionPerformed(evt);
            }
        });


        String [] doigts = {"Pouce D", "Pouce G", "Index D", "Index G", "Majeur D", "Majeur G", "Annulaire D", "Annulaire G", "Auriculaire D", "Auriculaire G"};
        jcDoigts.setModel(new DefaultComboBoxModel<>(doigts));
        jcDoigts.setSelectedIndex(0);
       // jtGetResult = new javax.swing.JTextArea();
        jtGetResult =new javax.swing.JScrollPane();
        setTitle("Collection des Personnes");
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(800, 700));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Inscription des Collaborateurs");
        jLabel4.setText("Version 1.0");

        jtPersonnes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
           // new String [] {
             //   "ID", "Matricule", "Nom", "Date de Naissance", "Type"
            //}
            new String [] {
                "Matricule","Nom","Date de Naissance","type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtPersonnes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtPersonnesMouseClicked(evt);
            }
        });
       // jScrollPane1.setViewportView(jtPersonnes);
        //jtGetResult.setViewportView(jtPersonnes);
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Matricule");

        jtMatricule.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jtMatricule.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jtMatriculeInputMethodTextChanged(evt);
            }
        });

        jbEnregistrer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbEnregistrer.setText("Enregistrer");
       // jbEnregistrer.setEnabled(false);
        jbEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEnregistrerActionPerformed(evt);
            }
        });

        jbEnregistrer1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbEnregistrer1.setText("Enregistrer");
        jbEnregistrer1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEnregistrer1ActionPerformed(evt);
            }
        });


        jbReset.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbReset.setText("Reset");
        jbReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbResetActionPerformed(evt);
            }
        });

        jbMenu.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbMenu.setText("Retour");
        jbMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset();
                jbMenuActionPerformed(evt);
            }
        });

        jbEmpreinte.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
       // jbEmpreinte.setText("Gérer les empreintes");
        jbEmpreinte.setText("Enregistrer");
        jbEmpreinte.setEnabled(false);
        jbEmpreinte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               // jbEmpreinteActionPerformed(evt);
                jbEnregistrer1ActionPerformed(evt);
            }
        });

        jbCheck.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbCheck.setText("Rechercher");
        jbCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCheckActionPerformed(evt);
            }
        });

        jbReconnect.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbReconnect.setText("Reconnecter");
        jbReconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReconnectActionPerformed(evt);
            }
        });

      //  jtGetResult.setEditable(false);
        //jtGetResult.setColumns(20);
        //jtGetResult.setRows(5);
        jScrollPane2.setViewportView(jtPersonnes);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtMatricule, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                   // .addComponent(jbEnregistrer, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(jcDoigts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbEmpreinte, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                  .addComponent(jbMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                  //  .addComponent(jbReset, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                   
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jbCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jbReconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        //   .addComponent(jbEnregistrer1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    ))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    //    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                         .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               // .addComponent(jbSetting, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jbImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtMatricule, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbReconnect,javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     
                             .addGap(18, 18, 18)
                        )
                        
                        .addComponent(jScrollPane2)
                        .addGap(18, 18, 18)
                        .addComponent(jcDoigts)
                        .addGap(18, 18, 18)
                      // .addGap(18, 18, 18)
                      //  .addComponent(jbImage)
                       // .addGap(18, 18, 18)
                      //  .addComponent(jbEnregistrer)
                     //   .addGap(18, 18, 18)
                      //  .addComponent(jbReset)
                      //  .addGap(18, 18, 18)
                        .addComponent(jbEmpreinte)
                        .addGap(18, 18, 18)
                        .addComponent(jbMenu)
                        .addComponent(jLabel4))
                      //  .addComponent(jbEnregistrer1)
             .addComponent(jbImage,600,600,600)
           )
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();

        stop = false;
        
        if(currentCollab !=null) {

        Empreinte empreinte = DAOFactory.getEmpreinteDAO().getByPersonneIdAndDoigt(currentCollab.getId(), (String) jcDoigts.getSelectedItem());
        
        if (empreinte != null) {
            InputStream is;
            try {
                is = empreinte.getImage().getBinaryStream(1, (int) empreinte.getImage().length());
                BufferedImage imag= ImageIO.read(is);
                Image image = imag;
                ImageIcon icon =new ImageIcon(image);
                jbImage.setIcon(icon);
            } catch (IOException | SQLException ex) {
               System.out.println(ex);
            }
        }
        }
        
        thread = new MyThread();
	   thread.setName("API");
        thread.start();
        
    }// </editor-fold>//GEN-END:initComponents

    private void jbImageActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jbEnregistrer1ActionPerformed(java.awt.event.ActionEvent evt) {

        if (jbImage.getIcon() == null) {
            JOptionPane.showMessageDialog(instance, "Veuillez scanner votre empreinte avant d'enregistrer !", "Message", JOptionPane.WARNING_MESSAGE);

        } else {

            //if (ZKScanner.getInstance().match().score > 0) {
            if (ZKScanner.getInstance().isOpenned() == false) {
              // ZKScanner.getInstance().open();
               ZKScanner.getInstance().demarrer(this);
            }
            if (ZKScanner.getInstance().match(currentCollab.getMatricule()).score > 0) {
                JOptionPane.showMessageDialog(instance, "L'empreinte existe déjà dans la base", "Message", JOptionPane.WARNING_MESSAGE);
            } else {
                if (currentCollab != null) {
                    Empreinte empreinte = DAOFactory.getEmpreinteDAO().getByPersonneIdAndDoigt(currentCollab.getId(), (String) jcDoigts.getSelectedItem());
                    if (empreinte != null) {
                        empreinte = DAOFactory.getEmpreinteDAO().update(
                                new Empreinte(
                                        empreinte.getId(),
                                        (String) jcDoigts.getSelectedItem(),
                                        //new FileInputStream(new File("fingerprint.bmp"),
                                        currentCollab.getId()
                                )
                        );
                        Rajout objR = new Rajout(empreinte.getId(), Authentification.getSession().getId(), 0, "inscription");
                        new RajoutDAO().create(objR);
                        JOptionPane.showMessageDialog(instance, "Empreinte " + empreinte.getDoigt() + " a été modifié avec succes");

                    } else {

                        empreinte = DAOFactory.getEmpreinteDAO().create(
                                new Empreinte(
                                        (String) jcDoigts.getSelectedItem(),
                                        //new FileInputStream(new File("fingerprint.bmp"),
                                        currentCollab.getId()
                                )
                        );
                        Rajout objR = new Rajout(empreinte.getId(), Authentification.getSession().getId(), 0, "inscription");
                        new RajoutDAO().create(objR);
                        JOptionPane.showMessageDialog(instance, "Empreinte " + empreinte.getDoigt() + " a été ajouté avec succès");

                    }

                } else {
                    JOptionPane.showMessageDialog(instance, "veuillez séléctionner une personne");

                }

            }

        }
    }
      private void jbReconnectActionPerformed(java.awt.event.ActionEvent evt) {
        ZKScanner.getInstance().FreeSensor(thread);
        ZKScanner.getInstance().demarrer(this);
        System.out.println(ZKScanner.getInstance().mbStop);    
        MyThread newthread= new MyThread();
        newthread.start();
        
    }
    private void jbEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEnregistrerActionPerformed

//        for (Collaborateur object : GetRequest.GetRequestArray(jtMatricule.getText())) {
//
//            if (DAOFactory.getCollaborateurDAO().getByMatType(object.getMatricule(), object.getType()) == null) {
//                DAOFactory.getCollaborateurDAO().create(object);
//            }
//
//        }
//        reset();
//System.out.println("BOUTTON ENREGISTRE");
//        showData();

    }//GEN-LAST:event_jbEnregistrerActionPerformed

    private void jbResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbResetActionPerformed
        reset();
        
    }//GEN-LAST:event_jbResetActionPerformed

    private void jbMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMenuActionPerformed
        this.dispose();
        MenuJFrame.getInstance().showFrame();
        CollaborateurViaAPIJFrame.getInstance().hideFrame();
        jbImage.setIcon(null);
        jtMatricule.setText("");


    }//GEN-LAST:event_jbMenuActionPerformed

    private void jbEmpreinteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEmpreinteActionPerformed

        int index = jtPersonnes.getSelectedRow();
        TableModel model = jtPersonnes.getModel();

        String matricule = model.getValueAt(index, 0).toString();
        String nom = model.getValueAt(index, 1).toString();
        String dateNaissance = model.getValueAt(index, 2).toString();
        String type = model.getValueAt(index, 3).toString();
        Collaborateur newCollaborateur = new Collaborateur(matricule, nom, dateNaissance, type);
        Collaborateur use = DAOFactory.getCollaborateurDAO().isthere(newCollaborateur);
        if (use == null) {
            DAOFactory.getCollaborateurDAO().create(newCollaborateur);
        } else {
            newCollaborateur = use;
        }
        currentCollab = DAOFactory.getCollaborateurDAO().get(newCollaborateur.getId());
        File file = new File("fingerprint.bmp");
        file.delete();
        this.dispose();
        EmpreinteJFrame.getInstance(currentCollab).showFrame();

    }//GEN-LAST:event_jbEmpreinteActionPerformed

    private void jtPersonnesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtPersonnesMouseClicked

        int index = jtPersonnes.getSelectedRow();
        TableModel model = jtPersonnes.getModel();

        String matricule = model.getValueAt(index, 0).toString();
        String nom = model.getValueAt(index, 1).toString();
        String dateNaissance = model.getValueAt(index, 2).toString();
        String type = model.getValueAt(index, 3).toString();
        Collaborateur newCollaborateur = new Collaborateur(matricule, nom, dateNaissance, type);
        Collaborateur use = DAOFactory.getCollaborateurDAO().isthere(newCollaborateur);
        if (use == null) {
            DAOFactory.getCollaborateurDAO().create(newCollaborateur);
        } else {
            newCollaborateur = use;
        }
        currentCollab = DAOFactory.getCollaborateurDAO().get(newCollaborateur.getId());
        File file = new File("fingerprint.bmp");
        file.delete();
        jbEmpreinte.setEnabled(true);
        /* String result = "";
        result = result.concat("Matricule : "+currentCollab.getMatricule()+" \n ");
        result = result.concat("Nom : "+currentCollab.getNom()+" \n ");
        result = result.concat("Date de Naissance : "+currentCollab.getDate_de_naissance()+" \n ");
        result = result.concat("Type : "+currentCollab.getType()+" \n ");
        
        //jtGetResult.setText(result);
        for (Collaborateur object : GetRequest.GetRequestArray(jtMatricule.getText())) {
                    
            if (DAOFactory.getCollaborateurDAO().getByMatType(object.getMatricule(), object.getType()) == null) {
                DAOFactory.getCollaborateurDAO().create(object);
            } 
            
        }
       
        showData();*/
        // reset();jbEnregistrer.setEnabled(true);
        if (ZKScanner.getInstance().isOpenned()) {
            jbEmpreinte.setEnabled(true);
        }
    }//GEN-LAST:event_jtPersonnesMouseClicked

    private void jtMatriculeInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jtMatriculeInputMethodTextChanged


    }//GEN-LAST:event_jtMatriculeInputMethodTextChanged

    private void jbCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCheckActionPerformed

        if (jtMatricule.getText().equals("")) {
            JOptionPane.showMessageDialog(instance, "Veuillez saisir le numero matricule", "Message", JOptionPane.WARNING_MESSAGE);
           
        } else {
            // jbEnregistrer.setEnabled(true);
            if (GetRequest.GetRequestArray(jtMatricule.getText()).isEmpty()) {
//                jtGetResult.setText("La requête ne renvoie aucun données");
            } else {
                /* String result = "";
                for (Collaborateur object : GetRequest.GetRequestArray(jtMatricule.getText())) {
                    
                    result = result.concat("Matricule : "+object.getMatricule()+" \n ");
                    result = result.concat("Nom : "+object.getNom()+" \n ");
                    result = result.concat("Date de Naissance : "+object.getDate_de_naissance()+" \n ");
                    result = result.concat("Type : "+object.getType()+" \n ");
                    
                    result = result.concat("***** \n");
                    
                } */
                // jbEnregistrer.setEnabled(true);
                resultRecherche();

                //   jtGetResult.setText(result);
            }

        }

    }//GEN-LAST:event_jbCheckActionPerformed

    private void showData() {

        DefaultTableModel model = (DefaultTableModel) jtPersonnes.getModel();

        model.setRowCount(0);

        Object[] row = new Object[5];

        DAOFactory.getCollaborateurDAO().getAll().stream().map(personne -> {
            row[0] = personne.getId();
            return personne;
        }).map(personne -> {
            row[1] = personne.getMatricule();
            return personne;
        }).map(personne -> {
            row[2] = personne.getNom();
            return personne;
        }).map(personne -> {
            row[3] = personne.getDate_de_naissance();
            return personne;
        }).map(personne -> {
            row[4] = personne.getType();
            return personne;
        }).forEachOrdered(_item -> {
            model.addRow(row);
        });

    }

    private void resultRecherche() {

        DefaultTableModel model = (DefaultTableModel) jtPersonnes.getModel();
        model.setRowCount(0);
        Object[] row = new Object[4];
        for (Collaborateur object : GetRequest.GetRequestArray(jtMatricule.getText())) {

            row[0] = object.getMatricule();
            row[1] = object.getNom();
            row[2] = object.getDate_de_naissance();
            row[3] = object.getType();
            model.addRow(row);
        }
        jtPersonnes.setModel(model);
    }

    private void reset() {

        currentCollab = null;

        jtMatricule.setText("");

        jbEmpreinte.setEnabled(false);
        jtPersonnes.removeAll(); DefaultTableModel model = (DefaultTableModel) jtPersonnes.getModel();
        model.setRowCount(0);
         jbEnregistrer.setEnabled(false);
        //DefaultTableModel model1 = (DefaultTableModel) jtPersonnes.getModel();
        model.setRowCount(0); 
        //Thread.currentThread().stop();
        

    }

    public void showFrame() {
        CollaborateurViaAPIJFrame.getInstance().setVisible(true);
        ZKScanner.getInstance().FreeSensor(thread);
        ZKScanner.getInstance().demarrer1(this);
        System.out.println(ZKScanner.getInstance().mbStop);    
        MyThread newthread= new MyThread();
        newthread.start();
    }

    public void hideFrame() {
        CollaborateurViaAPIJFrame.getInstance().setVisible(false);
        CollaborateurViaAPIJFrame.getInstance().reset();
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbCheck;
    private javax.swing.JButton jbReconnect;
    private javax.swing.JButton jbEmpreinte;
    private javax.swing.JButton jbEnregistrer;
    private javax.swing.JButton jbMenu;
    private javax.swing.JButton jbReset;
   // private javax.swing.JTextArea jtGetResult;
    private javax.swing.JScrollPane jtGetResult;
    private javax.swing.JTextField jtMatricule;
    private javax.swing.JTable jtPersonnes;
    private javax.swing.JComboBox<String> jcDoigts;
    private javax.swing.JButton jbEnregistrer1;
    // End of variables declaration//GEN-END:variables

   

}
